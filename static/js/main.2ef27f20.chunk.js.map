{"version":3,"sources":["view/Resources/loading.gif","view/Resources/logo.webp","view/Resources/deathstar.png","view/Helpers/Loading.jsx","view/GameBoard/PickGame.jsx","view/Helpers/apiFetch.js","view/Helpers/gameDataAdjust.js","view/Card/Reverse.jsx","view/Card/Front.jsx","view/Card/GameCard.jsx","view/GameBoard/GameBoard.jsx","view/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","Grid","className","container","justify","alignItems","item","xs","src","LoadingGif","alt","PickGame","dataSelect","spacing","Card","onClick","CardMedia","component","CardContent","apiFetch","url","Promise","resolve","reject","fetch","then","res","json","catch","err","response","results","count","pageCount","Math","ceil","length","iterable","i","push","all","map","ele","singleFetch","values","forEach","determineWiningCard","roundData","returnObj","factors","withoutComma","value","split","join","parseInt","isNaN","win","getUrlId","arr","prepareRoundData","cards","winFactor","onlyWantedFields","name","winFactorName","urlId","getOnlyWantedFields","getRandomCards","baseNumber","firstCardNumber","round","random","secondCardNumber","determinedWinner","player1","player2","Reverse","Logo","Front","stats","imgUrlPart","onError","e","target","GameCard","onFinishRound","killRound","onRoundKilled","left","cardRef","React","createRef","factor","useEffect","anime","targets","current","translateX","window","outerWidth","scale","rotate","complete","classList","add","setTimeout","begin","translateY","outerHeight","duration","ref","GameBoard","feed","changeGameData","useState","score","setScore","setRoundData","setKillRound","draw","setDraw","buttonDisabled","setButtonDisabled","startNewRound","newRoundData","data","winner","Object","keys","filter","currentScore","newScore","deathStar","Button","variant","disabled","Game","setFeed","setWinFactor","loading","setLoading","getFeed","a","type","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ef27f20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.bd69c16a.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.a51b1fe9.webp\";","module.exports = __webpack_public_path__ + \"static/media/deathstar.95cebd7e.png\";","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport LoadingGif from '../Resources/loading.gif'\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <Grid\r\n      className=\"loading-site\"\r\n      container\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Grid item xs={2}>\r\n        <img src={LoadingGif} alt=\"Loading circle\" />\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Loading;","import React from 'react';\r\nimport { Grid, Card, CardContent, CardMedia } from '@material-ui/core';\r\nimport propTypes from 'prop-types';\r\n\r\nconst PickGame = ({ dataSelect }) => {\r\n  return (\r\n    <Grid\r\n      className=\"pick-game\"\r\n      container\r\n      spacing={6}\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Grid item xs={12}>\r\n        <h1>Pick cards!</h1>\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <Card className=\"pick-game-card\" onClick={() => { dataSelect('people') }}>\r\n          <CardMedia\r\n            src='https://starwars-visualguide.com/assets/img/characters/1.jpg'\r\n            component=\"img\"\r\n            alt=\"Character picture\"\r\n          />\r\n          <CardContent>\r\n            <h1>Characters</h1>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={2}>\r\n        <Card className=\"pick-game-card\" onClick={() => { dataSelect('starships') }}>\r\n          <CardMedia\r\n            src='https://starwars-visualguide.com/assets/img/starships/10.jpg'\r\n            component=\"img\"\r\n            alt=\"Starship picture\"\r\n          />\r\n          <CardContent>\r\n            <h1>Starships</h1>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\nPickGame.propTypes = {\r\n  dataSelect: propTypes.func,\r\n}\r\nexport default PickGame;","const singleFetch = url =>\r\n  new Promise((resolve, reject) => {\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .catch(err => {\r\n        reject(err);\r\n      })\r\n      .then(response => {\r\n        if (response) {\r\n          resolve(response.results);\r\n        }\r\n      });\r\n  });\r\n\r\nconst apiFetch = url =>\r\n  new Promise((resolve, reject) => {\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .catch(err => {\r\n        reject(err);\r\n      })\r\n      .then(response => {\r\n        const { results, count } = response;\r\n        const pageCount = Math.ceil(count / results.length);\r\n        const iterable = [];\r\n        for (let i = 2; i < pageCount + 1; i++) {\r\n          iterable.push(`${url}/?page=${i}`);\r\n        }\r\n        Promise.all(iterable.map(ele => singleFetch(ele)))\r\n          .catch(err => {\r\n            reject(err);\r\n          })\r\n          .then(values => {\r\n            values.forEach(ele => {\r\n              results.push(...ele);\r\n            });\r\n            resolve(results);\r\n          });\r\n      });\r\n  });\r\n\r\nexport { apiFetch, singleFetch };","const getRandomCards = (cards) => {\r\n  const baseNumber = cards.length - 1;\r\n  const firstCardNumber = Math.round(Math.random() * baseNumber);\r\n  const secondCardNumber = Math.round(Math.random() * baseNumber);\r\n  if (firstCardNumber !== secondCardNumber) {\r\n    return [\r\n      cards[firstCardNumber],\r\n      cards[secondCardNumber],\r\n    ]\r\n  } else {\r\n    return getRandomCards(cards);\r\n  }\r\n}\r\n\r\nconst determineWiningCard = (roundData) => {\r\n  const returnObj = [...roundData];\r\n  const factors = roundData.map(ele => {\r\n    const withoutComma = ele.value.split(',').join('');\r\n    return parseInt(withoutComma, 10);\r\n  });\r\n  if (isNaN(factors[0]) || isNaN(factors[1]) || factors[0] === factors[1]) {\r\n    return roundData.map(ele => ({ ...ele, win: 'draw' }))\r\n  } else if (factors[0] > factors[1]) {\r\n    returnObj[0].win = true;\r\n    return returnObj;\r\n  } else {\r\n    returnObj[1].win = true;\r\n    return returnObj;\r\n  }\r\n}\r\n\r\nconst getWinner = (data) => {\r\n  const players = Object.keys(data);\r\n  return players.map(ele => {\r\n    if (data[ele].win && data[ele].win === \"draw\") {\r\n      return \"draw\";\r\n    } else if (data[ele].win) {\r\n      return ele;\r\n    } else {\r\n      return false;\r\n    }\r\n  }).filter(ele => ele)[0];\r\n}\r\n\r\nconst getUrlId = (url) => {\r\n  const arr = url.split('/');\r\n  return arr[arr.length - 2];\r\n}\r\n\r\nconst getOnlyWantedFields = (cards, winFactor) => {\r\n  return cards.map(ele => ({\r\n    name: ele.name,\r\n    value: ele[winFactor],\r\n    winFactorName: winFactor,\r\n    urlId: getUrlId(ele.url),\r\n  }));\r\n}\r\n\r\nconst prepareRoundData = (cards, winFactor) => {\r\n  const pickedCards = getRandomCards(cards);\r\n  const onlyWantedFields = getOnlyWantedFields(pickedCards, winFactor);\r\n  const determinedWinner = determineWiningCard(onlyWantedFields);\r\n  const roundData = {\r\n    player1: determinedWinner[0],\r\n    player2: determinedWinner[1],\r\n  }\r\n  return roundData;\r\n}\r\n\r\nexport {\r\n  getWinner,\r\n  prepareRoundData,\r\n  determineWiningCard,\r\n  getOnlyWantedFields,\r\n  getRandomCards\r\n}","import React from 'react';\r\nimport { Card, CardMedia } from '@material-ui/core';\r\nimport Logo from '../Resources/logo.webp';\r\n\r\nconst Reverse = () => {\r\n  return (\r\n    <Card className=\"inner reverse\">\r\n      <CardMedia\r\n        component=\"img\"\r\n        src={Logo}\r\n        alt=\"Star wars logo\"\r\n      />\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Reverse","import React from 'react';\r\nimport { Card, CardContent, CardMedia } from '@material-ui/core';\r\nimport propTypes from 'prop-types';\r\n\r\n\r\nconst Front = ({ stats }) => {\r\n  const { name, value, winFactorName, urlId } = stats;\r\n  const imgUrlPart = winFactorName === 'mass' ? 'characters' : 'starships';\r\n  return (\r\n    <Card className=\"inner front\">\r\n      <CardContent className=\"head\">\r\n        <h1>{name}</h1>\r\n      </CardContent>\r\n      <CardMedia\r\n        src={`https://starwars-visualguide.com/assets/img/${imgUrlPart}/${urlId}.jpg`}\r\n        component=\"img\"\r\n        alt=\"Card picture\"\r\n        onError={(e) => { e.target.src = 'https://starwars-visualguide.com/assets/img/placeholder.jpg' }}\r\n      />\r\n      <CardContent>\r\n        <h1>{winFactorName} : {value === 'unknown' ? '?' : value}</h1>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nFront.propTypes = {\r\n  stats: propTypes.object,\r\n}\r\n\r\nexport default Front;","import React, { useEffect } from 'react';\r\nimport anime from 'animejs';\r\nimport propTypes from 'prop-types';\r\n\r\nimport Reverse from './Reverse';\r\nimport Front from './Front';\r\n\r\nconst GameCard = ({ stats, onFinishRound, killRound, onRoundKilled, left }) => {\r\n  const cardRef = React.createRef();\r\n  const factor = left ? 1 : -1;\r\n\r\n  useEffect(() => {\r\n    if (stats) {\r\n      anime({\r\n        targets: cardRef.current,\r\n        translateX: (window.outerWidth / 4 - 30) * factor,\r\n        scale: 1.2,\r\n        rotate: factor + 'turn',\r\n        complete: () => {\r\n          cardRef.current.classList.add('flipped');\r\n          setTimeout(() => {\r\n            if (stats.win === 'draw') {\r\n              anime({\r\n                targets: cardRef.current,\r\n                scale: 0.7,\r\n                translateX: window.outerWidth / 5 * factor,\r\n                complete: () => {\r\n                  onFinishRound();\r\n                }\r\n              })\r\n            } else if (stats.win) {\r\n              anime({\r\n                targets: cardRef.current,\r\n                translateX: (window.outerWidth / 4 + 180) * factor,\r\n                begin: () => {\r\n                  cardRef.current.classList.add('winner');\r\n                },\r\n                complete: () => {\r\n                  onFinishRound();\r\n                }\r\n              })\r\n            } else {\r\n              anime({\r\n                targets: cardRef.current,\r\n                scale: 0.7,\r\n                translateX: window.outerWidth / 5 * factor,\r\n                complete: () => {\r\n                  onFinishRound();\r\n                }\r\n              })\r\n            }\r\n          }, 800)\r\n        }\r\n      })\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (killRound) {\r\n      if (stats.win === 'draw') {\r\n        anime({\r\n          targets: cardRef.current,\r\n          translateX: window.outerWidth / 4 * factor * -1,\r\n          complete: () => {\r\n            onRoundKilled();\r\n          }\r\n        })\r\n      } else if (stats.win) {\r\n        anime({\r\n          targets: cardRef.current,\r\n          translateY: window.outerHeight * -1,\r\n          translateX: window.outerWidth / 6 * factor,\r\n          duration: 1000,\r\n          complete: () => {\r\n            onRoundKilled();\r\n          }\r\n        })\r\n      } else {\r\n        anime({\r\n          targets: cardRef.current,\r\n          translateY: window.outerHeight,\r\n          duration: 1000,\r\n          complete: () => {\r\n            onRoundKilled();\r\n          }\r\n        })\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [killRound])\r\n\r\n  return (\r\n    <div\r\n      className=\"gamecard\"\r\n      ref={cardRef}\r\n    >\r\n      {!stats ?\r\n        <Reverse /> :\r\n        <div className=\"flip-card\">\r\n          <div className=\"flip-front\">\r\n            <Reverse />\r\n          </div>\r\n          <div className=\"flip-back\">\r\n            <Front\r\n              stats={stats}\r\n            />\r\n          </div>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nGameCard.propTypes = {\r\n  stats: propTypes.object,\r\n  onFinishRound: propTypes.func,\r\n  killRound: propTypes.bool,\r\n  onRoundKilled: propTypes.func,\r\n  left: propTypes.bool,\r\n}\r\n\r\nexport default GameCard;","import React, { useState } from 'react';\r\nimport { Grid, Button } from '@material-ui/core';\r\nimport propTypes from 'prop-types';\r\n\r\nimport { getWinner, prepareRoundData } from '../Helpers/gameDataAdjust';\r\nimport GameCard from '../Card/GameCard';\r\nimport Reverse from '../Card/Reverse';\r\nimport deathStar from '../Resources/deathstar.png';\r\n\r\n\r\nconst GameBoard = ({ feed, winFactor, changeGameData }) => {\r\n  const [score, setScore] = useState({ player1: 0, player2: 0 });\r\n  const [roundData, setRoundData] = useState(false);\r\n  const [killRound, setKillRound] = useState(false);\r\n  const [draw, setDraw] = useState(false);\r\n  const [buttonDisabled, setButtonDisabled] = useState(false);\r\n\r\n  const finishRound = () => {\r\n    const winner = getWinner(roundData);\r\n    if (winner === 'draw') {\r\n      setDraw(true);\r\n    } else {\r\n      setScore((currentScore) => {\r\n        const newScore = { ...currentScore };\r\n        newScore[winner] = newScore[winner] + 1;\r\n        return newScore;\r\n      })\r\n    }\r\n    setButtonDisabled(false);\r\n  }\r\n\r\n  const startNewRound = () => {\r\n    const newRoundData = prepareRoundData(feed, winFactor);\r\n    setRoundData(false);\r\n    setTimeout(() => {\r\n      setKillRound(false);\r\n      setDraw(false);\r\n      setRoundData(newRoundData);\r\n    }, 10)\r\n  }\r\n\r\n  const nextRound = () => {\r\n    setButtonDisabled(true);\r\n    if (roundData) {\r\n      setKillRound(true);\r\n    } else {\r\n      startNewRound();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={0} className=\"game-room\">\r\n      <Grid item xs={12} className=\"score-board\">\r\n        <h1>\r\n          <span className=\"score\">{score.player1}</span> : <span className=\"score\">{score.player2}</span>\r\n        </h1>\r\n      </Grid>\r\n      <Grid item xs={3} className=\"card-holder\" >\r\n        <div className=\"card-slot\">\r\n          {roundData ?\r\n            <div className=\"animated-card\">\r\n              <GameCard\r\n                stats={roundData.player1}\r\n                onFinishRound={finishRound}\r\n                killRound={killRound}\r\n                onRoundKilled={startNewRound}\r\n                left\r\n              />\r\n            </div> :\r\n            ''\r\n          }\r\n          <div className=\"gamecard\">\r\n            <Reverse />\r\n          </div>\r\n        </div>\r\n      </Grid>\r\n      <Grid item xs={6} className=\"game-table\">\r\n        {draw && <h2>Can't tell who wins.</h2>}\r\n        <img src={deathStar} alt=\"Star Wars Death Star\" />\r\n      </Grid>\r\n      <Grid item xs={3} className=\"card-holder\">\r\n        <div className=\"card-slot\">\r\n          {roundData ?\r\n            <div className=\"animated-card\">\r\n              <GameCard\r\n                stats={roundData.player2}\r\n                killRound={killRound}\r\n                onFinishRound={() => { }}\r\n                onRoundKilled={() => { }}\r\n              />\r\n            </div> :\r\n            ''\r\n          }\r\n          <div className=\"gamecard\">\r\n            <Reverse />\r\n          </div>\r\n        </div>\r\n      </Grid>\r\n      <Grid item xs={3} className=\"round-control\">\r\n        <Button variant=\"outlined\" onClick={changeGameData} disabled={buttonDisabled}>\r\n          Change cards\r\n        </Button>\r\n      </Grid>\r\n      <Grid item xs={6} className=\"round-control\">\r\n        <Button variant=\"outlined\" onClick={nextRound} disabled={buttonDisabled}>\r\n          Next round!\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nGameBoard.propTypes = {\r\n  feed: propTypes.array,\r\n  winFactor: propTypes.string,\r\n  changeGameData: propTypes.func,\r\n}\r\n\r\nexport default GameBoard","import React, { useState } from 'react';\r\n\r\nimport Loading from './Helpers/Loading';\r\nimport PickGame from './GameBoard/PickGame';\r\nimport { apiFetch } from './Helpers/apiFetch';\r\nimport GameBoard from './GameBoard/GameBoard';\r\n\r\nconst Game = () => {\r\n  const [feed, setFeed] = useState([]);\r\n  const [winFactor, setWinFactor] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const getFeed = async (url) => {\r\n    const feed = await apiFetch(url);\r\n    setFeed(feed);\r\n    setLoading(false);\r\n  }\r\n\r\n  const onCardsSelected = (type) => {\r\n    setLoading(true);\r\n    const url = `https://swapi.co/api/${type}`;\r\n    setWinFactor(type === 'people' ? 'mass' : 'crew');\r\n    getFeed(url);\r\n  }\r\n\r\n  const onChangeGameData = () => {\r\n    setFeed([]);\r\n    setWinFactor('');\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <Loading />\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"game-wrapper\">\r\n      {!feed.length ?\r\n        <PickGame dataSelect={onCardsSelected} /> :\r\n        <GameBoard feed={feed} winFactor={winFactor} changeGameData={onChangeGameData} />\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport './App.scss';\n\nimport Game from './view/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}